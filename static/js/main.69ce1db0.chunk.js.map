{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","disappear","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevCards","resetTurn","setTimeout","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAEe,SAASA,EAAT,GAA2E,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,aAAcC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,UAQxE,OACI,qBAAKC,UAAU,OAAf,SACI,sBAAKA,UAAS,UACPH,EAAU,UAAY,GADf,6BAERE,EAAY,YAAc,IAFhC,UAII,qBAAKC,UAAU,QAAQC,IAAKN,EAAKM,IAAKC,IAAI,yBAC1C,qBACIF,UAAU,OACVC,IAAI,uBACJE,QAhBI,WACXL,GACDF,EAAaD,IAeLO,IAAI,mB,UChBlBE,EAAa,CACjB,CAAE,IAAO,gBAAiBC,SAAS,GACnC,CAAE,IAAO,qBAAsBA,SAAS,GACxC,CAAE,IAAO,sBAAuBA,SAAS,GACzC,CAAE,IAAO,mBAAoBA,SAAS,GACtC,CAAE,IAAO,sBAAuBA,SAAS,GACzC,CAAE,IAAO,gBAAiBA,SAAS,GACnC,CAAE,IAAO,iBAAkBA,SAAS,GACpC,CAAE,IAAO,mBAAoBA,SAAS,GACtC,CAAE,IAAO,mBAAoBA,SAAS,GACtC,CAAE,IAAO,oBAAqBA,SAAS,GACvC,CAAE,IAAO,mBAAoBA,SAAS,GACtC,CAAE,IAAO,qBAAsBA,SAAS,IAsG3BC,MAnGf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEA,EAAgCR,oBAAS,GAAzC,mBAAOT,EAAP,KAAiBkB,EAAjB,KAKMC,EAAe,WAEnB,IAAMC,EAAgB,UAAId,EAAeA,GAEtCe,MAAK,kBAAMC,KAAKC,SAAW,MAE3BC,KAAI,SAAC3B,GAAD,mBAAC,eAAeA,GAAhB,IAAsB4B,GAAIH,KAAKC,cAGtCR,EAAa,MACbE,EAAa,MACbN,EAASS,GACTP,EAAS,IAILf,EAAe,SAACD,GACpBiB,EAAYG,EAAapB,GAAQkB,EAAalB,IAMhD6B,qBAAU,WACJZ,GAAaE,IAEfE,GAAY,GACRJ,EAAUX,MAAQa,EAAUb,KAE9BQ,GAAS,SAAAgB,GAEP,OAAOA,EAAUH,KAAI,SAAA3B,GAEnB,OAAIA,EAAKM,MAAQW,EAAUX,IAElB,2BAAKN,GAAZ,IAAkBU,SAAS,IAEpBV,QAIb+B,KAEAC,YAAW,kBAAMD,MAAa,SAGjC,CAACd,EAAWE,IAIf,IAAMY,EAAY,WAChBb,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAiB,GAAS,OAAIA,EAAY,KAClCZ,GAAY,IAQd,OAJAQ,qBAAU,WACRP,MACC,IAGD,sBAAKjB,UAAU,MAAf,UACE,8CACA,wBAAQG,QAASc,EAAjB,sBAEA,qBAAKjB,UAAU,YAAf,SACGQ,EAAMc,KAAI,SAAA3B,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EAEdC,QAASF,IAASiB,GAAajB,IAASmB,GAAanB,EAAKU,QAE1DN,UAAWJ,EAAKU,QAEhBP,SAAUA,GARLH,EAAK4B,SAWhB,wCAAWb,SC7GjBmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.69ce1db0.chunk.js","sourcesContent":["import './SingleCard.css';\n\nexport default function SingleCard({ card, handleChoice, flipped, disabled, disappear }) {\n\n    const handleClick = () => {\n        if (!disabled) {\n            handleChoice(card);\n        }\n    }\n\n    return (\n        <div className=\"card\">\n            <div className={\n                `${flipped ? \"flipped\" : \"\"}\n                ${disappear ? \"disappear\" : \"\"}`\n            }>\n                <img className=\"front\" src={card.src} alt=\"card front displayed\" />\n                <img\n                    className=\"back\"\n                    src=\"/img/ChocoboBack.png\"\n                    onClick={handleClick}\n                    alt=\"card back\" />\n            </div>\n        </div>\n    )\n}","import { useState, useEffect } from 'react';\n\nimport SingleCard from './components/SingleCard';\nimport './App.css';\n\nconst cardImages = [\n  { \"src\": \"/img/bard.png\", matched: false },\n  { \"src\": \"/img/blackmage.png\", matched: false },\n  { \"src\": \"/img/darkknight.png\", matched: false },\n  { \"src\": \"/img/dragoon.png\", matched: false },\n  { \"src\": \"/img/gunbreaker.png\", matched: false },\n  { \"src\": \"/img/monk.png\", matched: false },\n  { \"src\": \"/img/ninja.png\", matched: false },\n  { \"src\": \"/img/paladin.png\", matched: false },\n  { \"src\": \"/img/samurai.png\", matched: false },\n  { \"src\": \"/img/summoner.png\", matched: false },\n  { \"src\": \"/img/warrior.png\", matched: false },\n  { \"src\": \"/img/whitemage.png\", matched: false }\n];\n\nfunction App() {\n  //state of cards and turns\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  //state of choices\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  //set state to disable unselected cards\n  const [disabled, setDisabled] = useState(false);\n\n  /*\n    Shuffle cards\n  */\n  const shuffleCards = () => {\n    //duplicate cardImages twice(for matching) into a new array of cards\n    const shuffledCards = [...cardImages, ...cardImages]\n      //shuffle the new array of cards\n      .sort(() => Math.random() - 0.5)\n      //assign an id for each shuffled card\n      .map((card) => ({ ...card, id: Math.random() }));\n\n    //initialize shuffled cards, choices, and turn count\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  }\n\n  //handle a choice\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  /*\n    Compare card selections\n  */\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      //after both card choices are made, disable other card choices until the turn is reset\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        //if both choices match then update the state using the previous state\n        setCards(prevCards => {\n          //create a new array based of the previous array\n          return prevCards.map(card => {\n            //compare the first card choice with the second card choice\n            if (card.src === choiceOne.src) {\n              //if they match set the match key to value true on both cards\n              return { ...card, matched: true }\n            } else {\n              return card;\n            };\n          });\n        });\n        resetTurn();\n      } else {\n        setTimeout(() => resetTurn(), 1200)\n      };\n    };\n  }, [choiceOne, choiceTwo]);\n\n\n  //reset choices and increase turn\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  //shuffles cards on startup\n  useEffect(() => {\n    shuffleCards()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>FINAL MEMORY</h1>\n      <button onClick={shuffleCards}>NEW GAME</button>\n\n      <div className=\"card-grid\">\n        {cards.map(card => (\n          <SingleCard\n            key={card.id}\n            card={card}\n            handleChoice={handleChoice}\n            //keeps cards flipped that have been chosen or matched\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\n            //make matched cards disappear\n            disappear={card.matched}\n            //disable cards not being chosen until\n            disabled={disabled} />\n        ))}\n      </div>\n      <p>Turns: {turns}</p>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}